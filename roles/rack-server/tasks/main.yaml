#
# prep the servers for doing fun stuff :-)
#

- set_fact:
    myvars: "{{ servervars[inventory_hostname] }}"

- name: distribute the cluster hosts file
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK cluster hosts"
    block: "{{ lookup('file', '{{ inventory_dir }}/files/hosts') }}"
  become: true

- name: install packages
  apt:
    name: "{{ item }}"
    update_cache: yes
  become: true
  with_items: 
  - zile
  - lldpd
  - tcpdump
  - iperf3
  - ethtool
  - daemon

- name: start lldpd
  command: service lldpd start
  become: true

# set up networking on single leg (attached to odd numbered switches)
#
- name: high speed networking
  command: ifdown --force -a --allow=ansible
  become: true
  ignore_errors: yes

- name: enable the VLAN driver
  modprobe:
    name: 8021q
    state: present
  become: true

# get the right NIC card (this is a PITA :-)
- set_fact: MGMT_IF={{ ansible_default_ipv4.interface }}
- set_fact: RACK_IF=enp4s0f1
  when: MGMT_IF == "enp5s0f0"
- set_fact: RACK_IF=enp5s0f1
  when: MGMT_IF == "enp6s0f0"

- name: add fabric interface and bring it up
  blockinfile:
    dest: /etc/network/interfaces
    marker: "# {mark} ANSIBLE MANAGED BLOCK fabric"
    block: |
      auto {{ RACK_IF }}.120
      allow-ansible {{ RACK_IF }}.120
      iface {{ RACK_IF }}.120 inet static
        address 172.1.120.{{ myvars.RACK_SUFFIX }}
        netmask 255.255.255.0
        vlan-raw-device {{ RACK_IF }}


      auto {{ RACK_IF }}.130
      allow-ansible {{ RACK_IF }}.130
      iface {{ RACK_IF }}.130 inet static
        address 172.1.130.{{ myvars.RACK_SUFFIX }}
        netmask 255.255.255.0
        vlan-raw-device {{ RACK_IF }}


  become: true
- command: ifup -a --allow=ansible
  become: true

